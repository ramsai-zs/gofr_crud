// Code generated by MockGen. DO NOT EDIT.
// Source: datastore/interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	model "example/model"
	reflect "reflect"

	gofr "developer.zopsmart.com/go/gofr/pkg/gofr"
	gomock "github.com/golang/mock/gomock"
)

// MockEmpStore is a mock of EmpStore interface.
type MockEmpStore struct {
	ctrl     *gomock.Controller
	recorder *MockEmpStoreMockRecorder
}

// MockEmpStoreMockRecorder is the mock recorder for MockEmpStore.
type MockEmpStoreMockRecorder struct {
	mock *MockEmpStore
}

// NewMockEmpStore creates a new mock instance.
func NewMockEmpStore(ctrl *gomock.Controller) *MockEmpStore {
	mock := &MockEmpStore{ctrl: ctrl}
	mock.recorder = &MockEmpStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmpStore) EXPECT() *MockEmpStoreMockRecorder {
	return m.recorder
}

// EmpCreate mocks base method.
func (m *MockEmpStore) EmpCreate(ctx *gofr.Context, employee model.Employee) (model.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EmpCreate", ctx, employee)
	ret0, _ := ret[0].(model.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EmpCreate indicates an expected call of EmpCreate.
func (mr *MockEmpStoreMockRecorder) EmpCreate(ctx, employee interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmpCreate", reflect.TypeOf((*MockEmpStore)(nil).EmpCreate), ctx, employee)
}

// EmpGet mocks base method.
func (m *MockEmpStore) EmpGet(ctx *gofr.Context) ([]model.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EmpGet", ctx)
	ret0, _ := ret[0].([]model.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EmpGet indicates an expected call of EmpGet.
func (mr *MockEmpStoreMockRecorder) EmpGet(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmpGet", reflect.TypeOf((*MockEmpStore)(nil).EmpGet), ctx)
}

// EmpGetByID mocks base method.
func (m *MockEmpStore) EmpGetByID(ctx *gofr.Context, id int) (model.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EmpGetByID", ctx, id)
	ret0, _ := ret[0].(model.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EmpGetByID indicates an expected call of EmpGetByID.
func (mr *MockEmpStoreMockRecorder) EmpGetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmpGetByID", reflect.TypeOf((*MockEmpStore)(nil).EmpGetByID), ctx, id)
}

// EmpUpdate mocks base method.
func (m *MockEmpStore) EmpUpdate(ctx *gofr.Context, employee model.Employee) (model.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EmpUpdate", ctx, employee)
	ret0, _ := ret[0].(model.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EmpUpdate indicates an expected call of EmpUpdate.
func (mr *MockEmpStoreMockRecorder) EmpUpdate(ctx, employee interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmpUpdate", reflect.TypeOf((*MockEmpStore)(nil).EmpUpdate), ctx, employee)
}
