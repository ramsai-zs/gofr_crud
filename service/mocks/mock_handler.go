// Code generated by MockGen. DO NOT EDIT.
// Source: service/interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	model "example/model"
	reflect "reflect"

	gofr "developer.zopsmart.com/go/gofr/pkg/gofr"
	gomock "github.com/golang/mock/gomock"
)

// MockEmpService is a mock of EmpService interface.
type MockEmpService struct {
	ctrl     *gomock.Controller
	recorder *MockEmpServiceMockRecorder
}

// MockEmpServiceMockRecorder is the mock recorder for MockEmpService.
type MockEmpServiceMockRecorder struct {
	mock *MockEmpService
}

// NewMockEmpService creates a new mock instance.
func NewMockEmpService(ctrl *gomock.Controller) *MockEmpService {
	mock := &MockEmpService{ctrl: ctrl}
	mock.recorder = &MockEmpServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmpService) EXPECT() *MockEmpServiceMockRecorder {
	return m.recorder
}

// CreateEmp mocks base method.
func (m *MockEmpService) CreateEmp(ctx *gofr.Context, employee model.Employee) (model.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEmp", ctx, employee)
	ret0, _ := ret[0].(model.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEmp indicates an expected call of CreateEmp.
func (mr *MockEmpServiceMockRecorder) CreateEmp(ctx, employee interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEmp", reflect.TypeOf((*MockEmpService)(nil).CreateEmp), ctx, employee)
}

// GetEmp mocks base method.
func (m *MockEmpService) GetEmp(ctx *gofr.Context) ([]model.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmp", ctx)
	ret0, _ := ret[0].([]model.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmp indicates an expected call of GetEmp.
func (mr *MockEmpServiceMockRecorder) GetEmp(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmp", reflect.TypeOf((*MockEmpService)(nil).GetEmp), ctx)
}

// GetEmpByID mocks base method.
func (m *MockEmpService) GetEmpByID(ctx *gofr.Context, id int) (model.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmpByID", ctx, id)
	ret0, _ := ret[0].(model.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmpByID indicates an expected call of GetEmpByID.
func (mr *MockEmpServiceMockRecorder) GetEmpByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmpByID", reflect.TypeOf((*MockEmpService)(nil).GetEmpByID), ctx, id)
}

// UpdateEmp mocks base method.
func (m *MockEmpService) UpdateEmp(ctx *gofr.Context, employee model.Employee) (model.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEmp", ctx, employee)
	ret0, _ := ret[0].(model.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEmp indicates an expected call of UpdateEmp.
func (mr *MockEmpServiceMockRecorder) UpdateEmp(ctx, employee interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEmp", reflect.TypeOf((*MockEmpService)(nil).UpdateEmp), ctx, employee)
}
